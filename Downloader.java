import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.net.ssl.HttpsURLConnection;

public class Downloader {

    private static String downloadFolder = "/Users/khamlek/Downloads";

    public static void main(String[] args) {
        try {
            prepareFolder();

            for (String url : getURLs()) {
                downloadFile(url);
            }
        } catch (IOException e) {
            System.out.println("ERROR " + e);
        }
    }

    private static List<String> getURLs() {
        List<String> fileNames = new ArrayList<>();
        String baseURL = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-";
        fileNames.add(baseURL + "modified" + ".meta");
        fileNames.add(baseURL + "modified" + ".json.gz");
        fileNames.add(baseURL + "recent" + ".meta");
        fileNames.add(baseURL + "recent" + ".json.gz");

        for (int y = 2002; y <= Calendar.getInstance().get(Calendar.YEAR); y++) {
            fileNames.add(baseURL + String.valueOf(y) + ".meta");
            fileNames.add(baseURL + String.valueOf(y) + ".json.gz");
        }

        fileNames.add("https://raw.githubusercontent.com/Retirejs/retire.js/master/repository/jsrepository.json");

        return fileNames;
    }

    private static void downloadFile(String url) throws IOException {
        String fileName = new File(url).getName();

        System.out.print("Downloading file " + fileName);

        byte[] bytes = download(url);

        try (FileOutputStream fos = new FileOutputStream(Path.of(downloadFolder, fileName).toString())) {
            fos.write(bytes);
        }

        System.out.println("\t Done");
    }

    private static void prepareFolder() {
        downloadFolder = Path.of(downloadFolder, new SimpleDateFormat("yyyyMMddHHmm").format(new Date())).toString();
        new File(downloadFolder).mkdirs();
    }

    static byte[] download(String url) throws IOException {
        HttpsURLConnection conn = (HttpsURLConnection) new URL(url).openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod("GET");
        conn.setDoInput(true);
        int resCode = conn.getResponseCode();
        if (resCode != 200) {
            throw new IOException("ERROR " + resCode + ", " + conn.getResponseMessage());
        }
        return conn.getInputStream().readAllBytes();
    }
}